name: Deploy to Vercel

on:
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - staging
          - sandbox
          - production
      deployment_message:
        description: "Deployment reason"
        required: false
        default: "Manual deployment triggered"

permissions:
  contents: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.deployment_environment }}

    steps:
      - name: Validate that a tag was selected
        id: validate
        run: |
          if [[ "${GITHUB_REF}" != refs/tags/* ]]; then
            echo "::error::You must run this workflow from a tag."
            exit 1
          fi
          echo "version_tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Checkout the specified version tag
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.validate.outputs.version_tag }}

      - name: Install Latest Vercel CLI
        run: |
          npm install -g vercel@latest
          vercel --version

      - name: Notify Slack - Deployment Started
        uses: kranthisai-1/workflows/slack-alert@main
        with:
          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack_token: ${{ secrets.SLACK_TOKEN }}
          title: "Deployment initiated"
          message: "Deploying `${{ steps.validate.outputs.version_tag }}` to `${{ github.event.inputs.deployment_environment }}` now!"
          message_type: "info"

      - name: Prepare .env.local
        run: |
          case "${{ github.event.inputs.deployment_environment }}" in
            production)   cp .env.production  .env.local ;;
            sandbox)      cp .env.sandbox     .env.local ;;
            staging)      cp .env.staging     .env.local ;;
          esac

      - name: Pull Environment Variables
        run: |
          case "${{ github.event.inputs.deployment_environment }}" in
            production) npx vercel pull --yes --token ${{ secrets.VERCEL_TOKEN }} --environment=production ;;
            *)          npx vercel pull --yes --token ${{ secrets.VERCEL_TOKEN }} --environment=preview    ;;
          esac

      - name: Build the Project
        run: |
          if [[ "${{ github.event.inputs.deployment_environment }}" == "production" ]]; then
            npx vercel build --prod --token ${{ secrets.VERCEL_TOKEN }}
          else
            npx vercel build --token ${{ secrets.VERCEL_TOKEN }}
          fi

      - name: Deploy to Vercel
        id: vercel_deploy
        run: |
          if [[ "${{ github.event.inputs.deployment_environment }}" == "production" ]]; then
            npx vercel deploy --prebuilt --target=production --token ${{ secrets.VERCEL_TOKEN }} --yes --force
          else
            npx vercel deploy --prebuilt --target=preview    --token ${{ secrets.VERCEL_TOKEN }} --yes --force
          fi

      - name: Alias the Preview URL (Testing)
        if: ${{ github.event.inputs.deployment_environment != 'production' }}
        run: |
          DEPLOY_URL=$(echo "${{ steps.vercel_deploy.outputs.stdout_lines }}" | tail -1)
          echo "Deploy URL: $DEPLOY_URL"  # Just for debugging
          # Simulate aliasing by setting a temporary name (e.g., 'staging.vercel.app')
          if [[ "${{ github.event.inputs.deployment_environment }}" == "staging" ]]; then
            npx vercel alias set "$DEPLOY_URL" "staging.vercel.app" --token ${{ secrets.VERCEL_TOKEN }} --yes
          else
            npx vercel alias set "$DEPLOY_URL" "sandbox.vercel.app" --token ${{ secrets.VERCEL_TOKEN }} --yes
          fi

      - name: Notify Slack - Deployment Success with URL
        if: ${{ success() }}
        run: |
          DEPLOY_URL=$(echo "${{ steps.vercel_deploy.outputs.stdout_lines }}" | tail -1)
          echo "Deployment completed successfully. Preview URL: $DEPLOY_URL"
          uses: kranthisai-1/workflows/slack-alert@main
          with:
            channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
            slack_token: ${{ secrets.SLACK_TOKEN }}
            title: "Deployment Complete"
            message: "Version `${{ steps.validate.outputs.version_tag }}` was successfully deployed to `${{ github.event.inputs.deployment_environment }}`. View the deployment at $DEPLOY_URL."
            message_type: "success"

      - name: Notify Slack - Deployment Failure
        if: ${{ failure() }}
        uses: kranthisai-1/workflows/slack-alert@main
        with:
          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack_token: ${{ secrets.SLACK_TOKEN }}
          title: "Deployment Failed"
          message: "Deployment of version `${{ steps.validate.outputs.version_tag }}` to `${{ github.event.inputs.deployment_environment }}` failed."
          message_type: "danger"
