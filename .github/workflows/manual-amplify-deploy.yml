name: Deploy to Vercel

on:
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - staging
          - sandbox
          - production
      deployment_message:
        description: "Deployment reason"
        required: false
        default: "Manual deployment triggered"

permissions:
  contents: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.deployment_environment }}

    steps:
      - name: Validate that a tag was selected
        id: validate
        run: |
          if [[ "${GITHUB_REF}" != refs/tags/* ]]; then
            echo "::error::You must run this workflow from a tag."
            exit 1
          fi
          echo "version_tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Checkout the specified version tag
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.validate.outputs.version_tag }}

      - name: Install Latest Vercel CLI
        run: |
          npm install -g vercel@latest
          vercel --version

      - name: Notify Slack - Deployment Started
        uses: kranthisai-1/workflows/slack-alert@main
        with:
          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack_token: ${{ secrets.SLACK_TOKEN }}
          title: "Deployment initiated"
          message: "Deploying `${{ steps.validate.outputs.version_tag }}` to `${{ github.event.inputs.deployment_environment }}` now!"
          message_type: "info"

      - name: Prepare .env.local
        run: |
          case "${{ github.event.inputs.deployment_environment }}" in
            production)   cp .env.production  .env.local ;;
            sandbox)      cp .env.sandbox     .env.local ;;
            staging)      cp .env.staging     .env.local ;;
          esac

      - name: Pull Environment Variables
        run: |
          ENV_TARGET="${{ github.event.inputs.deployment_environment }}"
          if [[ "$ENV_TARGET" == "sandbox" ]]; then
            ENV_TARGET="preview"
          fi
          npx vercel pull --yes \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --environment=$ENV_TARGET

      - name: Build the Project
        run: |
          TARGET="${{ github.event.inputs.deployment_environment }}"
          if [[ "$TARGET" == "sandbox" ]]; then
            TARGET="preview"
          fi
          npx vercel build --token ${{ secrets.VERCEL_TOKEN }} --target=$TARGET

      - name: Deploy to Vercel
        id: vercel_deploy
        run: |
          TARGET="${{ github.event.inputs.deployment_environment }}"
          if [[ "$TARGET" == "sandbox" ]]; then
            TARGET="preview"
          fi
          DEPLOY_URL=$(npx vercel deploy --prebuilt \
            --target=$TARGET \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --yes --force | tail -1)
          echo "Deploy URL: $DEPLOY_URL"
          echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT

      - name: Send Slack Notification - Success
        if: ${{ success() }}
        uses: kranthisai-1/workflows/slack-alert@main
        with:
          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack_token: ${{ secrets.SLACK_TOKEN }}
          title: "Deployment Complete"
          message: "Version `${{ steps.validate.outputs.version_tag }}` was successfully deployed to `${{ github.event.inputs.deployment_environment }}`. View it at ${{ steps.vercel_deploy.outputs.deploy_url }}"
          message_type: "success"

      - name: Notify Slack - Deployment Failure
        if: ${{ failure() }}
        uses: kranthisai-1/workflows/slack-alert@main
        with:
          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack_token: ${{ secrets.SLACK_TOKEN }}
          title: "Deployment Failed"
          message: "Deployment of version `${{ steps.validate.outputs.version_tag }}` to `${{ github.event.inputs.deployment_environment }}` failed."
          message_type: "danger"
