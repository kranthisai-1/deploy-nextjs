name: Manual Tag Deployment

on:
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - staging
          - production
      deployment_message:
        description: "Deployment reason"
        required: false
        default: "Manual deployment triggered"

permissions:
  contents: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.deployment_environment }}

    steps:
      - name: Validate that a tag was selected
        id: validate
        run: |
          echo "GITHUB_REF=${GITHUB_REF}"
          if [[ "${GITHUB_REF}" != refs/tags/* ]]; then
            echo "::error::You must run this workflow from a tag."
            exit 1
          fi
          echo "version_tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Checkout the specified version tag
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.validate.outputs.version_tag }}

      - name: Notify Slack - Deployment Started
        uses: kranthisai-1/workflows/slack-alert@main
        with:
          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack_token: ${{ secrets.SLACK_TOKEN }}
          title: "Deployment initiated"
          message: "Deploying `${{ steps.validate.outputs.version_tag }}` to `${{ github.event.inputs.deployment_environment }}` now!"
          message_type: "info"

      - name: Link Vercel project
        run: |
          npx vercel link --yes --token ${{ secrets.VERCEL_TOKEN }} \
            --project prj_BxoaUQaP1tgrZr5WmjZiwvHc2K91 \
            --scope team_hbtqJO0t3tEq8rpWJdcoYkDZ

      - name: Prepare Environment Files
        run: |
          if [[ "${{ github.event.inputs.deployment_environment }}" == "production" ]]; then
            cp .env.production .env.local
          else
            cp .env.staging .env.local
          fi

      - name: Pull Project Settings
        run: |
          if [[ "${{ github.event.inputs.deployment_environment }}" == "staging" ]]; then
            npx vercel pull --yes --token ${{ secrets.VERCEL_TOKEN }} --environment=preview
          else
            npx vercel pull --yes --token ${{ secrets.VERCEL_TOKEN }} --environment=production
          fi

      - name: Build the Project
        run: |
          if [[ "${{ github.event.inputs.deployment_environment }}" == "production" ]]; then
            npx vercel build --token ${{ secrets.VERCEL_TOKEN }} --target production
          else
            npx vercel build --token ${{ secrets.VERCEL_TOKEN }} --target preview
          fi

      - name: Deploy to Vercel
        run: |
          if [[ "${{ github.event.inputs.deployment_environment }}" == "staging" ]]; then
            npx vercel deploy --prebuilt --token ${{ secrets.VERCEL_TOKEN }} --target=preview --yes --force
          else
            npx vercel deploy --prebuilt --token ${{ secrets.VERCEL_TOKEN }} --target=production --yes --force
          fi

      - name: Notify Slack - Deployment Success
        if: ${{ success() }}
        uses: kranthisai-1/workflows/slack-alert@main
        with:
          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack_token: ${{ secrets.SLACK_TOKEN }}
          title: "Deployment Complete"
          message: "Version `${{ steps.validate.outputs.version_tag }}` was successfully deployed to `${{ github.event.inputs.deployment_environment }}`."
          message_type: "success"

      - name: Notify Slack - Deployment Failure
        if: ${{ failure() }}
        uses: kranthisai-1/workflows/slack-alert@main
        with:
          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack_token: ${{ secrets.SLACK_TOKEN }}
          title: "Deployment Failed"
          message: "Deployment of version `${{ steps.validate.outputs.version_tag }}` to `${{ github.event.inputs.deployment_environment }}` failed."
          message_type: "danger"
